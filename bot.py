# from datetime import datetime
import asyncio

import aiohttp
import aiosqlite
from vkbottle import Bot
from vkbottle import Keyboard, KeyboardButtonColor, Text, OpenLink, BaseStateGroup, EMPTY_KEYBOARD
from vkbottle import PhotoMessageUploader
from vkbottle import VKAPIError
from vkbottle.bot import Message

from API_SJ_SQLUPDATE import *

global BOT
bot = Bot(token=sql_get_token_group_vk())
BOT = bot
photo_uploader = PhotoMessageUploader(bot.api)

async def bot_loop():
    bot = BOT
    photo_uploader = PhotoMessageUploader(bot.api)
    # –æ–±—å—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ—ã
    class SUBSDSATA(BaseStateGroup):
        CITY = 0
        PROF = 1
        PAY = 2
        GO = 4
        MENU = 5
        GET = 6
        CONT = 7
        NAME=8
        NAMEACCEPT=9

    # –ø–æ–ª—É—á–µ–Ω–∏–µ id usera
    async def iduserget(message: Message):
        users = await bot.api.users.get(message.from_id)
        id = users[0].id
        return id

    # 0 —ç—Ç–∞–ø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
    # ----------------------------------------------
    #
    #  –≤ —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–∞–º –ø–æ–∫–∞ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    @bot.on.message(text="/restart")
    async def bot_restart_handler(message: Message):
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin = await iduserget(message)
        if int(admin) == int(230352030):
            idusers = sql_idusers_get()
            keyboard = (Keyboard(inline=False)
                        .add(Text('–ù–∞—á–∞—Ç—å', {"command": "start"}))
                        )
            for user in idusers:
                try:
                    await bot.api.messages.send(
                        message=f"–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                        peer_id=user, keyboard=keyboard, random_id=0)
                except VKAPIError[901]:
                    print(f"–Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id {user}  –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ ", )
                    # admin_id = 230352030  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
                    # await bot.api.messages.send(
                    #     message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, VKAPIError_901",
                    #     peer_id=admin_id, random_id=0)
                    # continue
                    continue
        else:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
            await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞')


    # @bot.on.message(text=['Photo','photo'])
    # async def handler9(message):
    #     print(message.peer_id)
    #     photka = generate_image_with_qr_code_and_text('–ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å','https://www.superjob.ru/clients/s3-189142/vacancies.html')
    #     photo = await photo_uploader.upload(
    #         file_source=photka,
    #         peer_id=message.peer_id,
    #     )
    #     await message.answer(attachment=photo)














    @bot.on.message(state=None, payload={"command": "start"})  # –æ—Ç SUPERJOBüíö
    @bot.on.message(text=['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å'])
    async def starthandler(message: Message):

        users = await bot.api.users.get(message.from_id)
        keyboard = (Keyboard(inline=False, one_time=True)
                    .add(Text('–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É', {'cmd': 'reg'}), color=KeyboardButtonColor.POSITIVE)
                    )

        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {users[0].first_name}! \n –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ç SuperJob.'
                             '\n –Ø –∏—â—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n ‚Äî –ì–æ—Ä–æ–¥ \n ‚Äî –ü—Ä–æ—Ñ–µ—Å—Å–∏—è \n ‚Äî –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞\n–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É¬ªüëÄ',
                             keyboard=keyboard)

    # –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    @bot.on.message(payload={"cmd": "reg"})  # –æ—Ç SUPERJOBüíö
    async def Infouser_handler(message: Message):
        iduser = await iduserget(message)
        name = await bot.api.users.get(message.from_id)
        name = name[0].first_name
        check = sql_get_user_info(iduser)

        keyboard0 = (Keyboard(inline=False, one_time=True)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))

                     )
        keyboard1 = (Keyboard(inline=False, one_time=True)
                     .add(Text('–ù–∞—á–∞—Ç—å', {'cmd': 'changes'})))

        if check is not None:
            profession, city, salary = sql_get_user_info(iduser)
            checksubs = sql_allinfo_subscribe_status_get(iduser)
            print(checksubs,100000000000)
            if checksubs is not None:
                iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)
                if status2!=None and salary2!=None and city2!=None and profession2!=None and lastid2!=None:
                    if city2 == "–°–ø–±":
                        city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                    # active = 9
                    if status2 == 1:
                        active = '–î–∞'
                    elif status2 == 0:
                        active = '–ù–µ—Ç'
                    await message.answer(f'–°–º–æ—Ç—Ä–∏, –º—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                         f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                         f"–ì–æ—Ä–æ–¥: {city}\n"
                                         f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                         f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                                         f"–ì–æ—Ä–æ–¥ : {city2}\n"
                                         f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession2}\n"
                                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary2} ‚ÇΩ\n"
                                         f"–ê–∫—Ç–∏–≤–Ω–∞: {active}\n\n", )
                    await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
                    await  asyncio.sleep(0.5)
                    await Menu_handler(message)

                else:

                    if city == "–°–ø–±":
                        city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                    await message.answer(f'–°–º–æ—Ç—Ä–∏, –º—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                         f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                         f"–ì–æ—Ä–æ–¥: {city}\n"
                                         f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary} ‚ÇΩ\n\n")
            else:

                    if city == "–°–ø–±":
                        city = '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
                    await message.answer(f'–°–º–æ—Ç—Ä–∏, –º—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                         f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                         f"–ì–æ—Ä–æ–¥: {city}\n"
                                         f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary} ‚ÇΩ\n\n")
                    await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
                    await  asyncio.sleep(0.5)
                    await Menu_handler(message)
        if check is None:
            # await message.answer(f"{name}, —Ç—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å"
            #                      " —Å–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏\n –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –≤–∞–∫–∞–Ω—Å–∏–∏", keyboard=keyboard1)
            # await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CITY)
            await asyncio.sleep(0.5)
            await city_handler(message)

    # 1 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –≥–æ—Ä–æ–¥–µ
    # ---------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'changes'})
    async def city_handler(message: Message):

        keyboard = (
            Keyboard(inline=True)
            .add(Text('–ú–æ—Å–∫–≤–∞'))
            .add(Text('–°–æ—á–∏'))
            .add(Text("–ü–µ—Ä–º—å"))
            .row()
            .add(Text('–û–º—Å–∫'))
            .add(Text('–°–∞–º–∞—Ä–∞'))
            .add(Text('–ö–∞–∑–∞–Ω—å'))
            .row()
            .add(Text('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'))
            .row()
            .add(Text('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'))
            .row()
            .add(Text('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'))
            .row()
            .add(Text('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'))

        )

        # photo1= await photo_upd.upload('logo1.jpg')
        await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–∞–º üè¨",
                             keyboard=keyboard, attachment='photo-217363563_457239040')
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.PROF)

    # 2 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–µ—Å–∏–∏
    # ---------------------------------------------
    @bot.on.message(state=SUBSDSATA.PROF)
    async def prof_handler(message: Message):
        city=message.text
        if message.text=='–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥':
           city='–°–ø–±'
        if sql_access_cities(city)==1:
            sql_save_info_city(await iduserget(message), city.capitalize())
            keyboarad = (Keyboard(inline=True)
                         .add(Text('–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'))
                         .add(Text('–î–∏–∑–∞–π–Ω–µ—Ä'))
                         .row()
                         .add(Text('–ò–Ω–∂–µ–Ω–µ—Ä'))
                         .add(Text('–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä'))
                         .row()
                         .add(Text('–≠–∫–æ–Ω–æ–º–∏—Å—Ç'))
                         .add(Text('–Æ—Ä–∏—Å—Ç'))
                         .row()
                         .add(Text('HR-–º–µ–Ω–µ–¥–∂–µ—Ä'))
                         .row()
                         .add(Text('Product-–º–µ–Ω–µ–¥–∂–µ—Ä'))
                         .row()
                         .add(Text('SEO'))
                         .add(Text('–ê–Ω–∞–ª–∏—Ç–∏–∫ '))
                         )

            await message.answer('–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç‚ÄçüöÄ', keyboard=keyboarad,
                                 attachment='photo-217363563_457239042')
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.PAY)
        else:
           await message.answer('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ')
           await city_handler(message)


    # 3 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –∂–µ–ª–∞–µ–º–æ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    # --------------------------------------------
    @bot.on.message(state=SUBSDSATA.PAY)
    async def pay_handler(message: Message):

        keyboarad0 = (Keyboard(inline=True)
                      .add(Text('–æ—Ç 10 000‚ÇΩ', {'cmd': 'edit'}))
                      .add(Text('–æ—Ç 20 000‚ÇΩ', {'cmd': 'edit'}))
                      .row()
                      .add(Text('–æ—Ç 30 000‚ÇΩ', {'cmd': 'edit'}))
                      .add(Text('–æ—Ç 50 000‚ÇΩ', {'cmd': 'edit'}))
                      .row()
                      .add(Text('–æ—Ç 80 000‚ÇΩ', {'cmd': 'edit'}))
                      .add(Text('–æ—Ç 100 000‚ÇΩ', {'cmd': 'edit'}))
                      .row()
                      .add(Text('–æ—Ç 150 000‚ÇΩ', {'cmd': 'edit'}))
                      .add(Text('–æ—Ç 200 000‚ÇΩ', {'cmd': 'edit'})))
        sql_save_info_prof(await iduserget(message), message.text)

        await message.answer('–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã —Ç—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å? –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–∞–ºüí∏', keyboard=keyboarad0,attachment='photo-217363563_457239041')
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞
    # ------------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'edit'})
    async def initial_handler(message: Message):
        iduser = await iduserget(message)
        print(iduser)
        pay = message.text
        if '000‚ÇΩ' in str(pay):
            pay = message.text
            pay = pay.rstrip('‚ÇΩ').lstrip('–æ—Ç').replace(' ', '')
            sql_save_info_salary(iduser, pay)
            sql_change_position(iduser, 0)
        # sql_subscribe_status_set(iduser,'0')
        keyboardstart = (Keyboard(one_time=True, inline=False)
                         .add(Text('–ü–æ–ª—É—á–∏—Ç—å', {'cmd': 'get'}), color=KeyboardButtonColor.POSITIVE)
                         .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å', {'cmd': 'changes'}), color=KeyboardButtonColor.PRIMARY)
                         .row()
                         .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                         )
        keyboardcontin = (Keyboard(one_time=True, inline=False)
                          .add(Text('–ü–æ–ª—É—á–∏—Ç—å', {'cmd': 'get'}), color=KeyboardButtonColor.POSITIVE)
                          .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å', {'cmd': 'changes'}), color=KeyboardButtonColor.PRIMARY)
                          .row()
                          .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                          )
        profession, city, salary = sql_get_user_info(iduser)
        if city=="–°–ø–±":
            city='–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'
        pos = sql_position_giving_vacancies(iduser)
        # await message.answer(sql_position_giving_vacancies(await iduserget(message)))
        if int(pos) != 0:
            await message.answer(f"üñá –í—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                                 f"–ì–æ—Ä–æ–¥ : {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                 f'üëå –í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª.\n'
                                 f'–î–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–º–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª', keyboard=keyboardcontin)
        elif int(pos) == 0:
            await message.answer(f"üñá –í—ã–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                                 f"–ì–æ—Ä–æ–¥ : {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                 f'üëå–í—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –∂–º–∏ ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª.\n'
                                 f'–ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ ‚Äî –∂–º–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª'
                                 , keyboard=keyboardstart)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)

    # –≤—ã–¥–∞—á–∞ 5 –≤–∞–∫–∞–Ω—Å–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'get'})
    async def confirm_handler(message: Message):
        iduser = await iduserget(message)
        keyboard0 = (Keyboard(one_time=True)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'}))
                     .row()
                     .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))


                     )
        keyboard1 = (Keyboard(one_time=False)
                     .add(Text('–ü–æ–∏—â–µ–º –¥—Ä—É–≥–æ–µ', {'cmd': 'edit'}), color=KeyboardButtonColor.PRIMARY)
                     .row()
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'}))
                     .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )

        # –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–ø–∏!–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
        # –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º —Ç–æ–∫–µ–Ω–µ! —Å –±–ª–æ–∫–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∫–æ–ª–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π
        # ---------------------------------------
        profession, city, salary = sql_get_user_info(iduser)
        if city == '–°–ø–±':
            city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"

        newvacancy = await get_vacancy_objects(profession, city, salary)
        while newvacancy is None:
            newvacancy = await get_vacancy_objects(profession, city, salary)

        lenlist = len(newvacancy)


        sql_position_limit_set(iduser, lenlist)

        # # —Ä–∞–∑–±–∏–≤–∫–∞
        # # -----------------------------------------------
        if sql_position_limit_get(iduser) != 0:
            sql_change_position(iduser, 0)
            try:
                iduser = await iduserget(message)
                while sql_position_giving_vacancies(iduser) < 5 and sql_position_giving_vacancies(
                        iduser) < sql_position_limit_get(iduser):
                    pst = sql_position_giving_vacancies(iduser)
                    # if profession in newvacancy[pst]['profession']:
                    profession = newvacancy[pst]['profession']
                    link = newvacancy[pst]['link']
                    lastid = newvacancy[pst]['id']
                    logolink = newvacancy[pst]['client_logo']
                    # logo = await resize_image_from_url(logolink, 1920, 1080)
                    if pst == 0 and lastid != sqlgetlastid(iduser):
                        sql_save_lastid_vcncy(iduser, lastid)
                    keyboard1 = (Keyboard(inline=True)
                                 .add(OpenLink(link, '–û—Ç–∫—Ä—ã—Ç—å'))
                                 )
                    # print(newvacancy[pst]['payment_from'], ' ', newvacancy[pst]['payment_from'])
                    if int(newvacancy[pst]['payment_from']) != 0 and int(newvacancy[pst]['payment_to']) != 0:
                        payment = f"–æ—Ç {newvacancy[pst]['payment_from']}‚ÇΩ –¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"
                    elif int(newvacancy[pst]['payment_from']) == 0 and int(newvacancy[pst]['payment_to']) != 0:
                        payment = f" –¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"

                    elif int(newvacancy[pst]['payment_from']) != 0 and int(newvacancy[pst]['payment_to']) == 0:
                        payment = f" –æ—Ç {newvacancy[pst]['payment_from']}‚ÇΩ"
                    elif int(newvacancy[pst]['payment_from']) == 0 and int(newvacancy[pst]['payment_from']) == 0:
                        payment = '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
                    else:
                        payment = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    company = f'{newvacancy[pst]["firm_name"]}'
                    time.sleep(2)
                    qrcode=generate_image_with_qr_code_and_text(profession,link)
                    await message.answer(
                        message=f"–í–∞–∫–∞–Ω—Å–∏—è: {profession} \n–ö–æ–º–ø–∞–Ω–∏—è:{company} \n –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment} \n–ò–∑—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:",
                        keyboard=keyboard1)
                    sql_change_position(iduser, 1)
                await message.answer(
                    '–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©',
                    keyboard=keyboard0,attachment='photo-217363563_457239043')
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
            except IndexError:
                await message.answer('üôÜ –°–µ–π—á–∞—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ—Ç.\n–ü–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©', keyboard=keyboard1,attachment='photo-217363563_457239043')
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        else:
            await message.answer('üôÜ –°–µ–π—á–∞—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ—Ç.\n–ü–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©', keyboard=keyboard1)
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'menu'})
    async def Menu_handler(message: Message):
        iduser = await iduserget(message)
        profession, city, salary = sql_get_user_info(iduser)
        if city == 'C–ø–±':
            city = '–°–ü–ë'
        # print(profession, city, salary)
        # print(type(city))
        sql_create_link(iduser, profession, salary, city)
        mainlink = sql_savelink_user_get(iduser)
        # await  message.answer(mainlink)
        keyboard0 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', {'cmd': 'edit'}))
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'}))
                     )
        keyboard1 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', {'cmd': 'edit'}))
                     .row()
                     .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', {'cmd': 'subsstart'}))
                     .row()
                     .add(Text('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', {'cmd': 'subscancel'})))
        keyboard2 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', {'cmd': 'edit'}))
                     .row()
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'})))
        # print(sql_allinfo_subscribe_status_get(iduser),567)
        print(8888888888)
        checksubs=sql_allinfo_subscribe_status_get(iduser)
        if checksubs is None:
            await message.answer("–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", keyboard=keyboard0)
        else:
            iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)
            if status2 == None and salary2 == None and city2 == None and profession2 == None and lastid2 == None:
                await message.answer("–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", keyboard=keyboard0)

        if sql_subscribe_status_get(iduser) == 1:
                    await message.answer("–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", keyboard=keyboard1)
        elif sql_subscribe_status_get(iduser) == 0:
                    await message.answer("–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", keyboard=keyboard2)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)

    # –¥–æ–ø –≤—ã–¥–∞—á–∞
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'add'})
    async def ADD_handler(message: Message):

        iduser = await iduserget(message)
        mainlink = sql_savelink_user_get(iduser)
        keyboard2 = (Keyboard(inline=True)
                     .add(OpenLink(mainlink, '–û—Ç–∫—Ä—ã—Ç—å'))
                     )
        keyboard0 = (Keyboard(inline=True)

                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'}))
                     )
        try:
            if sql_position_giving_vacancies(iduser) + 5 <= sql_position_limit_get(iduser):
                profession, city, salary = sql_get_user_info(iduser)
                if city == '–°–ø–±':
                    city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
                newvacancy = await get_vacancy_objects(profession, city, salary)
                for next in range(1, 6):

                    pst = sql_position_giving_vacancies(iduser)
                    # if profession in newvacancy[pst]['profession']:
                    profession = newvacancy[pst]['profession']
                    link = newvacancy[pst]['link']
                    lastid = newvacancy[pst]['id']
                    if pst == 0 and lastid != sqlgetlastid(iduser):
                        sql_save_lastid_vcncy(iduser, lastid)
                    keyboard1 = (Keyboard(inline=True)
                                 .add(OpenLink(link, '–û—Ç–∫—Ä—ã—Ç—å'))
                                 )

                    if int(newvacancy[pst]['payment_from']) != 0 and int(newvacancy[pst]['payment_to']) != 0:

                        payment = f"–æ—Ç {newvacancy[pst]['payment_from']}‚ÇΩ –¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"
                    elif int(newvacancy[pst]['payment_from']) == 0 and int(newvacancy[pst]['payment_to']) != 0:

                        payment = f" –¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"

                    elif int(newvacancy[pst]['payment_from']) != 0 and int(newvacancy[pst]['payment_to']) == 0:

                        payment = f" –æ—Ç {newvacancy[pst]['payment_from']}‚ÇΩ"
                    elif int(newvacancy[pst]['payment_from']) == 0 and int(newvacancy[pst]['payment_from']) == 0:

                        payment = '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
                    else:
                        payment = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                    company = f'{newvacancy[pst]["firm_name"]}'
                    await message.answer(
                        f"–í–∞–∫–∞–Ω—Å–∏—è: {profession} \n–ö–æ–º–ø–∞–Ω–∏—è:{company} \n –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment} \n–ò–∑—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:",
                        keyboard=keyboard1)
                    sql_change_position(iduser, 1)

                # await message.answer(keyboard=keyboard0)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
            elif sql_position_giving_vacancies(iduser) + 5 >= sql_position_limit_get(iduser):
                sql_change_position(iduser, 0)
                await message.answer(
                    'üíÅ –°–µ–π—á–∞—Å —ç—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.\n–ü–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©',
                    keyboard=keyboard0)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
                await asyncio.sleep(0.5)
                await Menu_handler(message)
        except IndexError:
                await message.answer('üôÜ –°–µ–π—á–∞—Å –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ—Ç.\n–ü–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©', keyboard=keyboard0,attachment='photo-217363563_457239043')
                await asyncio.sleep(0.5)
                await Menu_handler(message)

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    # --------------------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'subsstart'})
    async def subs_confirm_handler(message: Message):
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', {'cmd': 'subsname'}))
                     .row()
                     .add(Text('–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏', {'cmd': 'edit'}))
                     .row()
                     .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        keyboard1 = (Keyboard(one_time=False)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', {'cmd': 'subsname'}))
                     .row()
                     .add(Text('–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏', {'cmd': 'edit'}))

                     .row()
                     .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        keyboard2 = (Keyboard(one_time=False)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', {'cmd': 'subsfinish'}))
                     .row()
                     .add(Text('–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏', {'cmd': 'edit'}))
                     .row()
                     .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', {'cmd': 'subsnaming'}))
                     .row()
                     .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        iduser = await iduserget(message)
        # print(iduser,type(iduser))
        profession, city, salary = sql_get_user_info(iduser)

        if city == '–°–ø–±':
            city = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        print(1.1)
        checksubs=sql_allinfo_subscribe_status_get(iduser)
        if checksubs is None:
            await message.answer(f'–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                 f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                 f"–ì–æ—Ä–æ–¥: {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary} ‚ÇΩ\n\n"
                                 f'–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ', keyboard=keyboard0)
        elif checksubs is not None:
                iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)
                if status2 == None and salary2 == None and city2 == None and profession2 == None and lastid2 == None:
        # if sql_allinfo_subscribe_status_get(iduser) is None:
                    print(1.2)
                    await message.answer(f'–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                 f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                 f"–ì–æ—Ä–æ–¥: {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary} ‚ÇΩ\n\n"
                                 f'–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ', keyboard=keyboard0)

                print(1.3)
                iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)
                if city2 == '–°–ø–±':
                    city2 = "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
                active = 9
                if status2 == 1:
                    active = '–î–∞'
                elif status2 == 0 or status2==None:
                    active = '–ù–µ—Ç'
                subsname=sql_subs_name_get(iduser)
                print(subsname)
                if subsname is not None:
                    print(1.4)
                    await message.answer(f'–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                     f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                     f"–ì–æ—Ä–æ–¥: {city}\n"
                                     f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                     f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                     
                                     f"–ó–∞–º–µ–Ω—è—Ç –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
                                     f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {subsname}\n"
                                     f"–ì–æ—Ä–æ–¥ : {city2}\n"
                                     f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession2}\n"
                                     f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary2} ‚ÇΩ\n"
                                     f"–ê–∫—Ç–∏–≤–Ω–∞: {active}\n\n"
                                     f'1.–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ \n'
                                     f'2.–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ \n'
                                     f'3.–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º \n', keyboard=keyboard2)
                if subsname is None:
                        print(1.5)
                        await message.answer(f'–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                             f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                             f"–ì–æ—Ä–æ–¥: {city}\n"
                                             f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                             f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                             
                                             f"–ó–∞–º–µ–Ω—è—Ç –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
                                             f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è \n"
                                             f"–ì–æ—Ä–æ–¥ : {city2}\n"
                                             f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession2}\n"
                                             f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary2} ‚ÇΩ\n"
                                             f"–ê–∫—Ç–∏–≤–Ω–∞: {active}\n\n"
                                             f'1.–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n\n'
                                             f'2.–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ', keyboard=keyboard1)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        # –≤—Å—Ç–∞–≤–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'subsname'})
    async def subs_naming_handler(message: Message):

            await message.answer(f'–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ üñá',keyboard=EMPTY_KEYBOARD)
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.NAME)
            # await subs_finish0_handler

    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'subsnaming'})
    async def subs_naming1_handler(message: Message):

        await message.answer(f'–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ üñá', keyboard=EMPTY_KEYBOARD)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.NAMEACCEPT)
    @bot.on.message(state=SUBSDSATA.NAME)
    async def subs_finish0_handler(message: Message):
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )
        keyboard1 = (Keyboard(one_time=False)
                     .add(Text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', {'cmd': 'subsfinish'}))
                     )
        iduser = await iduserget(message)
        subsname = message.text
        sql_subs_name_set(iduser, subsname)
        # subsname = sql_subs_name_get(iduser)
        profession, city, salary = sql_get_user_info(iduser)
        iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)
        await message.answer(f"–ü–æ–ª—É—á–∏–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã  –≤—ã—à–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
                             f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {subsname} \n"
                             f"–ì–æ—Ä–æ–¥ : {city}\n"
                             f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                             f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary} ‚ÇΩ\n"
                             f'–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ - –∂–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', keyboard=keyboard1)
        # path = sql_subscribe_status_set(iduser, 1)

        # await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {subsname}',keyboard=keyboard1)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)


    @bot.on.message(state=SUBSDSATA.NAMEACCEPT)
    async def subs_finish1_handler(message: Message):
            iduser = await iduserget(message)
            subsname = message.text
            sql_subs_name_set(iduser, subsname)
            await message.answer('–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ')
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
            await Menu_handler(message)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd': 'subsfinish'})
    async def subs_finish2_handler(message: Message):
        iduser = await iduserget(message)


        path = sql_subscribe_status_set(iduser, 1)
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )
        if path == 1:
            await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        elif path == 2:
            await message.answer('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')
        elif path == 3:
            await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–∂–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–æ–±–ª–µ–Ω–∞')
        elif path == 4:
            await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        elif path == 6:
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!')
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        print('++++++')
        await Menu_handler(message)
    #  –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.on.message(state=SUBSDSATA.CONT, payload={'cmd': 'subscancel'})
    async def subs_cancel_handler(message: Message):
        iduser = await iduserget(message)
        subsname=sql_subs_name_get(iduser)
        path = sql_subscribe_status_set(iduser, 0)
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )
        keyboard1 = (Keyboard(one_time=False, inline=True)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', {'cmd': 'subsstart'}))
                     )
        if path == 5:
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ {subsname} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
            await message.answer('–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–µ–∂–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n'
                                 '-–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É üì©', keyboard=keyboard1,attachment='photo-217363563_457239043')
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        await Menu_handler(message)

    await bot.run_polling()


# ----------------------------------------------------------------------
async def check_new_vacancies_for_users():
    async def get_users_data():
        async with aiosqlite.connect('sjbase0.db') as db:
            db.row_factory = aiosqlite.Row
            async with db.execute('SELECT * FROM sjsubscript WHERE status = 1') as cursor:
                rows = await cursor.fetchall()
                users_data = [dict(row) for row in rows]
                print(users_data)
        return users_data

    async def get_user_vacancy_objects(user_data):
        # print(user_data['iduser'])
        access_token, refresh_token, client_secret, client_id, token_group = await sql_get_api_keys_info()
        params = {
            'payment_from': user_data['salary'],
            'sort_new': time.time(),
            'keyword': user_data['profession'],
            'town': user_data['city'],
        }
        headers = {
            'X-Api-App-Id': client_secret,
            'Authorization': f'Bearer {access_token}',
        }
        url = 'https://api.superjob.ru/2.0/vacancies/'
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                response_json = await response.json()

                return response_json

    async def process_user_vacancy_objects(user_data, vacancy_objects):
        # print(2)
        lastid = user_data['lastid']
        if 'objects' in vacancy_objects and vacancy_objects['objects'] != []:
            # print(user_data)
            # print(vacancy_objects)
            first_vacancy = vacancy_objects['objects'][0]
            first_vacancy_id = first_vacancy['id']

            # print('id', user_data['iduser'], ' ', first_vacancy_id, ' - ', lastid)

            if first_vacancy_id != lastid:
                # print('send')
                # –û–±–Ω–æ–≤–ª—è–µ–º lastid –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                async with aiosqlite.connect('sjbase0.db') as db:
                    await db.execute('UPDATE sjsubscript SET lastid = ? WHERE iduser = ?',
                                     (first_vacancy_id, user_data['iduser']))
                    await db.commit()
                    profession = first_vacancy['profession']
                    link = first_vacancy['link']
                    keyboard1 = (Keyboard(inline=True)
                                 .add(OpenLink(link, '–û—Ç–∫—Ä—ã—Ç—å'))
                                 )
                if int(first_vacancy['payment_from']) != 0 and int(first_vacancy['payment_to']) != 0:

                    payment = f"–æ—Ç {first_vacancy['payment_from']}‚ÇΩ –¥–æ {first_vacancy['payment_to']}‚ÇΩ"
                elif int(first_vacancy['payment_from']) == 0 and int(first_vacancy['payment_to']) != 0:

                    payment = f" –¥–æ {first_vacancy['payment_to']}‚ÇΩ"

                elif int(first_vacancy['payment_from']) != 0 and int(first_vacancy['payment_to']) == 0:

                    payment = f" –æ—Ç {first_vacancy['payment_from']}‚ÇΩ"
                elif int(first_vacancy['payment_from']) == 0 and int(first_vacancy['payment_from']) == 0:

                    payment = '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
                else:
                    payment = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                company = f'|{first_vacancy["firm_name"]}|'
                subsname=sql_subs_name_get(user_data['iduser'])
                text = \
                    f"–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ {subsname}]" \
                     \
                    f" –í–∞–∫–∞–Ω—Å–∏—è: {profession} \n –ö–æ–º–ø–∞–Ω–∏—è: {company} \n –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment}\n\nü§ù –ò–∑—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è:"
                await BOT.api.messages.send(peer_id=user_data['iduser'], message=text, random_id=0, keyboard=keyboard1,attachment='photo-217363563_457239044')
                # await bot.api.messages.send(message=f'{p}', peer_id=user_data['vk_id'], random_id=0)
            else:
                print('equal')
        else:
            if sql_subscribe_status_get(user_data['iduser']) != 1:
                keyboard = (Keyboard(one_time=False, inline=True)
                            .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å', {'cmd': 'edit'}))
                            )
                await BOT.api.messages.send(peer_id=user_data['iduser'],
                                            message='–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ',
                                            random_id=0, keyboard=keyboard)
                null_objects_status_change(user_data['iduser'], 0)
                print('–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π')
            pass

    while True:
        await asyncio.sleep(900)
        users_data = await get_users_data()
        tasks = []
        for user_data in users_data:
            task = asyncio.create_task(get_user_vacancy_objects(user_data))
            tasks.append(task)

        vacancy_objects_list = await asyncio.gather(*tasks)

        for user_data, vacancy_objects in zip(users_data, vacancy_objects_list):
            await process_user_vacancy_objects(user_data, vacancy_objects)


async def main():
    keyboard = (Keyboard(inline=False)
                .add(Text('–ù–∞—á–∞—Ç—å', {'cmd': 'menu'}))
                )
    idusers = sql_idusers_get()
    # for user in idusers:
    #
    #     # try:
    #     #     await bot.api.messages.send(
    #     #         message=f"–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
    #     #         peer_id=user, keyboard=keyboard, random_id=0)
    #     # except VKAPIError[901]:
    #     #     print(f"–Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é id {user}  –∏–∑-–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ ", )
    #     #     admin_id = 230352030  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞
    #     #     await bot.api.messages.send(
    #     #         message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, VKAPIError_901",
    #     #         peer_id=admin_id, random_id=0)


    task1 = asyncio.create_task(check_new_vacancies_for_users())
    task2 = asyncio.create_task(bot_loop())
    await asyncio.gather(task1, task2)


if __name__ == "__main__":
    asyncio.run(main())
