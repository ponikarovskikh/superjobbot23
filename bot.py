
from vkbottle.bot import Bot,Message
from vkbottle import Keyboard,KeyboardButtonColor,Text,OpenLink,BaseStateGroup
from API_SJ_SQLUPDATE import *
from datetime import datetime
import asyncio
import aiosqlite
import aiohttp

global bot

async def bot_loop():
    bot=Bot(token=sql_get_token_group_vk())
    x=1
    x=3
# –æ–±—å—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ—ã
    class SUBSDSATA(BaseStateGroup):
        CITY=0
        PROF=1
        PAY=2
        GO=4
        MENU = 5
        GET = 6
        CONT=7
# –ø–æ–ª—É—á–µ–Ω–∏–µ id usera
    async def iduserget(message:Message):
        users = await bot.api.users.get(message.from_id)
        id = users[0].id
        return id

# 0 —ç—Ç–∞–ø –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
# ----------------------------------------------
    @bot.on.message(state=None,payload={"command":"start"})#–æ—Ç SUPERJOBüíö
    @bot.on.message(text=['–ù–∞—á–∞—Ç—å','–Ω–∞—á–∞—Ç—å'])
    async def starthandler(message:Message):

        users = await bot.api.users.get(message.from_id)
        keyboard=(Keyboard(inline=False,one_time=True)
              .add(Text('–ò—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É',{'cmd':'reg'}), color=KeyboardButtonColor.POSITIVE)
              )

        await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {users[0].first_name}! \n –≠—Ç–æ –±–æ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.'
                         '\n –ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n –ì–æ—Ä–æ–¥ | –ü—Ä–æ—Ñ–µ—Å—Å–∏—è | –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞üìù\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ò—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É"üîî',keyboard=keyboard)

    # –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    @bot.on.message(payload={"cmd":"reg"})#–æ—Ç SUPERJOBüíö
    async def starthandler(message:Message):
        iduser = await iduserget(message)
        check=sql_get_user_info(iduser)

        keyboard0=(Keyboard(inline=False,one_time=True)
               .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))

              )
        keyboard1 = (Keyboard(inline=False, one_time=True)
                 .add(Text('–ù–∞—á–∞—Ç—å', {'cmd': 'change'}))

                 )

        if check is not None:
            profession, city, salary = sql_get_user_info(iduser)
            checksubs=sql_allinfo_subscribe_status_get(iduser)
            if checksubs is not None:
                iduser2, status2, salary2, city2, profession2, lastid2 = sql_allinfo_subscribe_status_get(iduser)

                active = 9
                if status2 == 1:
                    active = '–î–∞'
                elif status2 == 0:
                    active = '–ù–µ—Ç'
                await message.answer(f'–°–º–æ—Ç—Ä–∏, –º—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                             f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                             f"–ì–æ—Ä–æ–¥: {city}\n"
                             f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                             f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                             f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                             f"–ì–æ—Ä–æ–¥ : {city2}\n"
                             f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession2}\n"
                             f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary2}‚ÇΩ\n"
                             f"–ê–∫—Ç–∏–≤–Ω–∞: {active}\n\n"
                             f'–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ò–∑–º–µ–Ω–∏—Ç—å ', keyboard=keyboard0)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
            if checksubs is None:
                await message.answer(f'–°–º–æ—Ç—Ä–∏, –º—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n'
                                     f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                     f"–ì–æ—Ä–æ–¥: {city}\n"
                                     f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                     f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n" , keyboard=keyboard0)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        if check is None:
            await message.answer("–û,–¥—Ä—É–≥, —Ç—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å!"
                             " –í—ã–±–∏—Ä–∞–π —Å–∫–æ—Ä–µ–µ —Å–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏\n –±—É–¥–µ–º –ø–æ–¥–±–µ—Ä–∞—Ç—å —Ç–µ–±–µ –≤–∫—É—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", keyboard=keyboard1)
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
# 1 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –≥–æ—Ä–æ–¥–µ
# ---------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'change'})
    async def city_handler(message:Message):

        keyboard = (
            Keyboard(inline=True)
            .add(Text('–ú–æ—Å–∫–≤–∞'))
            .add(Text('–ö–∞–∑–∞–Ω—å'))
            .row()
            .add(Text('C–ü–ë'))
            .row()
            .add(Text('–í–æ—Ä–æ–Ω–µ–∂'))
            .add(Text("–ö–∞–ª—É–≥–∞"))
            .row()
            .add(Text('–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É'))
            .row()
            .add(Text('–í–æ–ª–≥–æ–≥—Ä–∞–¥'))
            .add(Text('–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä'))
            .row()
            .add(Text('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'))

                 )



    # photo1= await photo_upd.upload('logo1.jpg')
        await message.answer("–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏? –Ø —ç—Ç–æ –º–æ–≥—É! –ü—Ä–∏—Å—Ç—É–ø–∏–º? –í—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø–∏—à–∏ –≤—Ä—É—á–Ω—É—é üß≠üåÅ", keyboard=keyboard,attachment='photo-217363563_457239024')
        await bot.state_dispenser.set(message.peer_id,SUBSDSATA.PROF)
# 2 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –ø—Ä–æ—Ñ–µ—Å–∏–∏
#---------------------------------------------
    @bot.on.message(state=SUBSDSATA.PROF)
    async def prof_handler(message:Message):
        sql_save_info_city(await iduserget(message),message.text) #–ø–æ–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Ç–µ—Ä —á–µ—Ç–æ —Å—å–µ—Ö–∞–ª
        keyboarad=(Keyboard(inline=True)
            .add(Text('–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'))
            .add(Text('–î–∏—Ä–µ–∫—Ç–æ—Ä'))
            .row()
            .add(Text('–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫'))
            .add(Text('–î–∏–∑–∞–π–Ω–µ—Ä'))
            .row()
            .add(Text('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))
            .add(Text('–Æ—Ä–∏—Å—Ç'))
            .row()
            .add(Text('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞'))
            .add(Text('–í–æ–¥–∏—Ç–µ–ª—å'))
            .row()
            .add(Text('–ú–µ–Ω–µ–¥–∂–µ—Ä'))
            .add(Text('–ü—Ä–æ–¥–∞–≤–µ—Ü'))
               )

        await message.answer('–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç‚ÄçüöÄ',keyboard=keyboarad,attachment='photo-217363563_457239032')
        await bot.state_dispenser.set(message.peer_id,SUBSDSATA.PAY)
# 3 —ç—Ç–∞–ø –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ –∂–µ–ª–∞–µ–º–æ–º –∑–∞—Ä–∞–±–æ—Ç–∫–µ
# --------------------------------------------
    @bot.on.message(state=SUBSDSATA.PAY)
    async def pay_handler(message:Message):

        keyboarad0 = (Keyboard(inline=True)
                 .add(Text('10 000‚ÇΩ',{'cmd':'edit'}))
                 .add(Text('20 000‚ÇΩ',{'cmd':'edit'}))
                 .row()
                 .add(Text('30 000‚ÇΩ',{'cmd':'edit'}))
                 .add(Text('50 000‚ÇΩ',{'cmd':'edit'}))
                 .row()
                 .add(Text('80 000‚ÇΩ',{'cmd':'edit'}))
                 .add(Text('100 000‚ÇΩ',{'cmd':'edit'}))
                 .row()
                 .add(Text('150 000‚ÇΩ',{'cmd':'edit'}))
                 .add(Text('200 000‚ÇΩ',{'cmd':'edit'}))
                 .row()
                 .add(Text('300 000‚ÇΩ',{'cmd':'edit'}))
                 .add(Text('400 000‚ÇΩ',{'cmd':'edit'}))   )
        sql_save_info_prof(await iduserget(message),message.text)

        await message.answer('–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å? –í—ã–±–µ—Ä–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤—Ä—É—á–Ω—É—é üíµ', keyboard=keyboarad0,attachment='photo-217363563_457239028')
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –†–µ–∑—É–ª—å—Ç–∞—Ç–∞
# ------------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'edit'})
    async def initial_handler(message:Message):
        iduser= await iduserget(message)
        print(iduser)
        pay= message.text
        if '‚ÇΩ' in str(pay):
            pay = message.text
            pay = pay.rstrip('‚ÇΩ').replace(' ', '')
            sql_save_info_salary(iduser,pay)
            sql_change_position(iduser, 0)
         # sql_subscribe_status_set(iduser,'0')
        keyboardstart = (Keyboard(one_time=True,inline=False)
                .add(Text('–ü–æ–ª—É—á–∏—Ç—å',{'cmd':'get'}), color=KeyboardButtonColor.POSITIVE)
                .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å', {'cmd': 'change'}), color=KeyboardButtonColor.PRIMARY)
                .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                )
        keyboardcontin = (Keyboard(one_time=True, inline=False)

                     .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å', {'cmd': 'change'}), color=KeyboardButtonColor.PRIMARY)
                     .row()
                     .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}), color=KeyboardButtonColor.SECONDARY)
                     )
        profession, city, salary=sql_get_user_info(iduser)
        pos=sql_position_giving_vacancies(iduser)
        # await message.answer(sql_position_giving_vacancies(await iduserget(message)))
        if int (pos) != 0:
            await message.answer(f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ãüé≤:\n–ì–æ—Ä–æ–¥ : {city}"
                         f"\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}"
                         f'\n\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ - "–ü–æ–ª—É—á–∏—Ç—å"\n'
                         f'–ï—Å–ª–∏ –ó–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ò–∑–º–µ–Ω–∏—Ç—å ',keyboard=keyboardcontin)
        elif int(pos)==0:
            await message.answer(f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ãüé≤:\n–ì–æ—Ä–æ–¥ : {city}"
                         f"\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                         f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}"
                         f'\n\n –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ - "–ü–æ–ª—É—á–∏—Ç—å"\n'
                      ,keyboard=keyboardstart)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
#–≤—ã–¥–∞—á–∞ 5 –≤–∞–∫–∞–Ω—Å–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'get'})
    async def confirm_handler(message: Message):
        iduser = await iduserget(message)
        keyboard0 = (Keyboard(one_time=True)
                 .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd':'menu'}))
                 .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsstart'}))
                 )
        keyboard1=(Keyboard(one_time=False)
                .add(Text('–ü–æ–∏—â–µ–º –¥—Ä—É–≥–æ–µ',{'cmd':'edit'}), color=KeyboardButtonColor.PRIMARY)
                .add(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
               )

# –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–ø–∏!–ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π
# –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–º —Ç–æ–∫–µ–Ω–µ! —Å –±–ª–æ–∫–æ–º –≤–∞–∫–∞–Ω—Å–∏–π –∏ –∫–æ–ª–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π
# ---------------------------------------
        profession, city, salary = sql_get_user_info(iduser)
        newvacancy = await get_vacancy_objects(profession, city, salary)

        lenlist=len(newvacancy)
        sql_position_limit_set(iduser,lenlist)

# # —Ä–∞–∑–±–∏–≤–∫–∞
# # -----------------------------------------------
        if sql_position_limit_get(iduser)!=0:
            sql_change_position(iduser, 0)
            try:
                iduser = await iduserget(message)
                while sql_position_giving_vacancies(iduser) < 5 and sql_position_giving_vacancies(iduser) < sql_position_limit_get(iduser)   :
                        pst=sql_position_giving_vacancies(iduser)
                    # if profession in newvacancy[pst]['profession']:
                        profession = newvacancy[pst]['profession']
                        link = newvacancy[pst]['link']
                        lastid=newvacancy[pst]['id']
                        if pst==0 and lastid!=sqlgetlastid(iduser):
                            sql_save_lastid_vcncy(iduser,lastid)
                        keyboard1=(Keyboard(inline=True)
                                .add(OpenLink(link,'–û—Ç–∫—Ä—ã—Ç—åüöÄ'))
                                )
                        if int(newvacancy[pst]['payment_from'])!=0 and int(newvacancy[pst]['payment_from'])!=0 :
                         payment = f"–¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"

                        elif int(newvacancy[pst]['payment_from'])==0:
                         payment = f" –¥–æ {newvacancy[pst]['payment_to']}"

                        elif int(newvacancy[pst]['payment_to']) == 0:
                         payment = f" –¥–æ {newvacancy[pst]['payment_to']}"
                        else:
                         payment = f"{newvacancy[pst]['payment_from']} - {newvacancy[pst]['payment_to']}"
                        if payment=='0 - 0':
                            payment='–ü–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
                        company = f'{newvacancy[pst]["firm_name"]}'
                        await message.answer(
                        f"üíº–í–∞–∫–∞–Ω—Å–∏—è: {profession} \n üèô–ö–æ–º–ø–∞–Ω–∏—è:{company} \n üí≤–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment} \nüîú–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏:",
                        keyboard=keyboard1)
                        sql_change_position(iduser,1)
                await message.answer('–ü–æ–Ω—Ä–∞–≤–∏–ª–∏—Å –≤–∞–∫–∞–Ω—Å–∏–∏ –∂–º–∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞–π —Å–≤–µ–∂–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–µ—Ä–≤—ã–º',keyboard=keyboard0)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
            except IndexError:
                await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n',keyboard=keyboard1)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        else:
            await message.answer('–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞–∫–∞–Ω—Å–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º',keyboard=keyboard1)
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
#–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'menu'})
    async def Menu_handler(message: Message):
        iduser = await iduserget(message)
        profession, city, salary = sql_get_user_info(iduser)
        if city == 'C–ø–±':
            city='–°–ü–ë'
        print(profession, city, salary )
        print(type(city))
        sql_create_link(iduser,profession,salary,city)
        mainlink=sql_savelink_user_get(iduser)
        # await  message.answer(mainlink)
        keyboard0 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',{'cmd':'edit'}))
                     .add(Text('–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',{'cmd':'subsfinish'}))
                       )
        keyboard1 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞',{'cmd':'edit'}))
                     .row()
                     .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',{'cmd':'subsstart'}))
                     .row()
                     .add(Text('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', {'cmd': 'subscancel'})))
        keyboard2 = (Keyboard(one_time=False)
                     .add(OpenLink(mainlink, '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'))
                     .add(Text('–°–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ', {'cmd': 'add'}))
                     .row()
                     .add(Text('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', {'cmd': 'edit'}))
                     .row()
                     .add(Text('–ü–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', {'cmd': 'subsfinish'})))
        if sql_allinfo_subscribe_status_get(iduser) is None:
                await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",keyboard=keyboard0)
        elif sql_subscribe_status_get(iduser) is not None:
            if sql_subscribe_status_get(iduser)==1:
                await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",keyboard=keyboard1)
            elif sql_subscribe_status_get(iduser)==0:
                await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", keyboard=keyboard2)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
#–¥–æ–ø –≤—ã–¥–∞—á–∞
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'add'})
    async def ADD_handler(message:Message):
        # keyboard0 = (Keyboard(one_time=False)
        #              .add(Text('–î–∞–≤–∞–π –µ—â–µ', {'cmd': 'add'}))
        #              .add(Text('–ù–∞–∑–∞–¥',{'cmd': 'menu'}))
        #              )
        keyboard2 = (Keyboard(one_time=False)
                   .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        iduser = await iduserget(message)
        if sql_position_giving_vacancies(iduser)+5 <= sql_position_limit_get(iduser):
            profession, city, salary = sql_get_user_info(iduser)
            newvacancy = await get_vacancy_objects(profession, city, salary)
            for next in range(1,6):

                        pst = sql_position_giving_vacancies(iduser)
                    # if profession in newvacancy[pst]['profession']:
                        profession = newvacancy[pst]['profession']
                        link = newvacancy[pst]['link']
                        lastid = newvacancy[pst]['id']
                        if pst == 0 and lastid != sqlgetlastid(iduser):
                            sql_save_lastid_vcncy(iduser, lastid)
                        keyboard1 = (Keyboard(inline=True)
                                     .add(OpenLink(link, '–û—Ç–∫—Ä—ã—Ç—åüöÄ'))
                                     )
                        if int(newvacancy[pst]['payment_from']) != 0 and int(newvacancy[pst]['payment_from']) != 0:
                            payment = f"–¥–æ {newvacancy[pst]['payment_to']}‚ÇΩ"

                        elif int(newvacancy[pst]['payment_from']) == 0:
                            payment = f" –¥–æ {newvacancy[pst]['payment_to']}"

                        elif int(newvacancy[pst]['payment_to']) == 0:
                            payment = f" –¥–æ {newvacancy[pst]['payment_to']}"
                        else:
                            payment = f"{newvacancy[pst]['payment_from']} - {newvacancy[pst]['payment_to']}"
                        if payment == '0 - 0':
                            payment = '–ü–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
                        company = f'{newvacancy[pst]["firm_name"]}'
                        await message.answer(
                            f"üíº–í–∞–∫–∞–Ω—Å–∏—è: {profession} \n üèô–ö–æ–º–ø–∞–Ω–∏—è:{company} \n üí≤–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment} \nüîú–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏:",
                            keyboard=keyboard1)
                        sql_change_position(iduser,1)
            # await message.answer(keyboard=keyboard0)
            await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
        elif sql_position_giving_vacancies(iduser) + 5 > sql_position_limit_get(iduser):
                sql_change_position(iduser, 0)
                await message.answer('–£–ø—Å, –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å',keyboard=keyboard2)
                await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)


#–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
# --------------------------------------------------
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'subsstart'})
    async def subs_confirm_handler(message: Message):
        keyboard0=(Keyboard(one_time=False)
                    .add(Text('–°–æ–∑–¥–∞—Ç—å', {'cmd': 'subsfinish'}))
                    .row()
                    .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        keyboard1 = (Keyboard(one_time=False)
                     .add(Text('–ò–∑–º–µ–Ω–∏—Ç—å –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', {'cmd': 'subsfinish'}))
                     .row()
                     .add(Text('–ù–∞–∑–∞–¥', {'cmd': 'menu'}))
                     )
        iduser = await iduserget(message)
        print(iduser,type(iduser))
        profession, city, salary = sql_get_user_info(iduser)
        iduser2, status2, salary2, city2, profession2, lastid2=sql_allinfo_subscribe_status_get(iduser)
        active=9
        if status2==1:
            active='–î–∞'
        elif status2==0:
            active='–ù–µ—Ç'
        if sql_allinfo_subscribe_status_get(iduser) is None:
            await message.answer(f'–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                 f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                 f"–ì–æ—Ä–æ–¥: {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                 f'–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ò–∑–º–µ–Ω–∏—Ç—å ', keyboard=keyboard0)

        elif sql_allinfo_subscribe_status_get(iduser) is not None:
            await message.answer(f'–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞?\n\n'
                                 f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
                                 f"–ì–æ—Ä–æ–¥: {city}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary}‚ÇΩ\n\n"
                                 f"–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
                                 f"–ì–æ—Ä–æ–¥ : {city2}\n"
                                 f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profession2}\n"
                                 f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {salary2}‚ÇΩ\n"
                                 f"–ê–∫—Ç–∏–≤–Ω–∞: {active}\n\n"
                                 f'–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –ò–∑–º–µ–Ω–∏—Ç—å ', keyboard=keyboard1)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'subsfinish'})
    async def subs_finish_handler(message: Message):
        iduser=await iduserget(message)
        path=sql_subscribe_status_set(iduser,1)
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )
        if path == 1:
            await message.answer('–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', keyboard=keyboard0)
        elif path==2:
            await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ,–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', keyboard=keyboard0)
        elif path == 3:
            await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ –ø—Ä–µ–∂–Ω–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–æ–±–ª–µ–Ω–∞', keyboard=keyboard0)
        elif path == 4:
            await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', keyboard=keyboard0)
        elif path==6:
            await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!', keyboard=keyboard0)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
#  –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    @bot.on.message(state=SUBSDSATA.CONT,payload={'cmd':'subscancel'})
    async def subs_finish_handler(message: Message):
        iduser=await iduserget(message)
        path=sql_subscribe_status_set(iduser,0)
        keyboard0 = (Keyboard(one_time=False)
                     .add(Text('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {'cmd': 'menu'}))
                     )
        keyboard1 = (Keyboard(one_time=False,inline=True)
                     .add(Text('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—èüçç', {'cmd': 'subsstart'}))
                     )
        if path==5:
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', keyboard=keyboard0)
            await message.answer('–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏,\n'
                                 '—Å–æ–≤–µ—Ç—É–µ–º —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',keyboard=keyboard1)
        await bot.state_dispenser.set(message.peer_id, SUBSDSATA.CONT)
    await bot.run_polling()
# ----------------------------------------------------------------------
async def check_new_vacancies_for_users():


    async def get_users_data():
            async with aiosqlite.connect('sjbase0.db') as db:
                db.row_factory = aiosqlite.Row
                async with db.execute('SELECT * FROM sjsubscript WHERE status = 1') as cursor:
                    rows = await cursor.fetchall()
                    users_data = [dict(row) for row in rows]
            return users_data



    async def get_user_vacancy_objects(user_data):
            access_token, refresh_token, client_secret, client_id, token_group = await sql_get_api_keys_info()
            params = {
                'payment_from': user_data['salary'],
                'sort_new': time.time(),
                'keyword': user_data['profession'],
                'town': user_data['city'],
            }
            headers = {
                'X-Api-App-Id': client_secret,
                'Authorization': f'Bearer {access_token}',
            }
            url = 'https://api.superjob.ru/2.0/vacancies/'
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, params=params) as response:
                    response_json = await response.json()
                    return response_json




    async def process_user_vacancy_objects(user_data, vacancy_objects):
            lastid = user_data['lastid']
            if 'objects' in vacancy_objects and len(vacancy_objects)!=0:
                first_vacancy = vacancy_objects['objects'][0]
                first_vacancy_id = first_vacancy['id']
                if first_vacancy_id != lastid:
                    # –û–±–Ω–æ–≤–ª—è–µ–º lastid –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    async with aiosqlite.connect('sjbase0.db') as db:
                        await db.execute('UPDATE sjsubscript SET lastid = ? WHERE iduser = ?', (first_vacancy_id, user_data['iduser']))
                        await db.commit()
                        profession = first_vacancy['profession']
                        link = first_vacancy['link']
                        keyboard1 = (Keyboard(inline=True)
                                 .add(OpenLink(link, '–û—Ç–∫—Ä—ã—Ç—åüöÄ'))
                                 )
                    if int(first_vacancy['payment_from']) != 0 and int(first_vacancy['payment_from']) != 0:
                        payment = f"–¥–æ {first_vacancy['payment_to']}‚ÇΩ"

                    elif int(first_vacancy['payment_from']) == 0:
                        payment = f" –¥–æ {first_vacancy['payment_to']}"

                    elif int(first_vacancy['payment_to']) == 0:
                        payment = f" –¥–æ {first_vacancy['payment_to']}"
                    else:
                        payment = f"{first_vacancy['payment_from']} - {first_vacancy['payment_to']}"
                    if payment == '0 - 0':
                        payment = '–ü–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'
                    company = f'{first_vacancy["firm_name"]}'
                    text= f"üíº –ù–æ–≤–∞—è –í–∞–∫–∞–Ω—Å–∏—è: {profession} \n üèô–ö–æ–º–ø–∞–Ω–∏—è:{company} \n üí≤–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã: {payment} \nüîú–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏:"
                    await bot.api.messages.send(peer_id=user_data['iduser'], message=text, random_id=0,keyboard=keyboard1)
                    # await bot.api.messages.send(message=f'{p}', peer_id=user_data['vk_id'], random_id=0)



    while True:
        await asyncio.sleep(300)
        users_data = await get_users_data()
        tasks = []
        for user_data in users_data:
            task = asyncio.create_task(get_user_vacancy_objects(user_data))
            tasks.append(task)

        vacancy_objects_list = await asyncio.gather(*tasks)

        for user_data, vacancy_objects in zip(users_data, vacancy_objects_list):
            await process_user_vacancy_objects(user_data, vacancy_objects)

async def main():
    task1 = asyncio.create_task(check_new_vacancies_for_users())
    task2 = asyncio.create_task(bot_loop())
    await asyncio.gather(task1, task2)


if __name__ == "__main__":
    asyncio.run(main())










